# THE MATH LIBRARY
# creation date 30/6/2022
# last modified 30/6/2022
# author: William Bell
# license: MIT
# version: 1.0

# --------------------------------------------------------------------------------------------------------------------

# description:
#   This module contains basic math functions for use within Argon.
#   The algorithms used are designed to be fast and efficient, however may give inaccurate results with large numbers.
#   However variables such as pi and e are included in the module and have been pre-computed for you, with 1000 digits to make they will work with every use case.
#   algorithms such as logarithm give close but not exact results, however the speed of the algorithm is fast. if you want to get more accurate results, you can find other maths modules which are more accurate, or create your own function.

# --------------------------------------------------------------------------------------------------------------------

# functions:
#   abs(x)
#   ceil(x)
#   floor(x)
#   round(x)
#   sqrt(x)
#   sin(x)
#   cos(x)
#   tan(x)
#   exp(x)
#   logarithm(x)

# --------------------------------------------------------------------------------------------------------------------

# trigonometry functions

sub sin(theta) [
    x = ((theta)/180) mod 1
    result = 0-(((x - 0.5)**2) * 4) + 1
    if ((theta div 180) div 1) % 2 != 0 [
        result = result * -1
    ]
    return result
]

sub cos(theta) [
    return sin(theta + 90)
]

sub tan(theta) [
    return sin(theta) / cos(theta)
]

# --------------------------------------------------------------------------------------------------------------------

# math functions

sub factorial(num) [
    num = whole(num)
    answer = 1
    i = 2
    while i < num+1 [
        answer = answer * i
        i = i + 1
    ]
    return answer
]

sub mod(x, n) [
    return x - n * whole(x / n)
]

sub abs(x) [
    if x < 0 [
        return 0-x
    ]
    return x
]

sub sqrt(x) [
    last_guess = x/2
    if x equals 0 [
        return 0
    ]
    while yes [
        guess = (last_guess + x / last_guess) / 2
        if abs(guess - last_guess) < 1e-5 [
            return guess
        ]
        last_guess = guess
    ]
]

sub exp(x) [
    return (e**x)
]

sub logarithm(x) [
    n = 1e10
    return n * ((x ** (1/n)) - 1)
]

# --------------------------------------------------------------------------------------------------------------------

# initialize math numbers

pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989

e = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354

goldenRatio = (1 + sqrt(5)) / 2

# --------------------------------------------------------------------------------------------------------------------