# make PI variable with PI to 1000 digits (may not be completely parsed)
PI = 31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989e-1000

sub factorial(num) [
    num = whole(num)
    answer = 1
    i = 2
    while i < num+1 [
        answer = answer * i
        i = i + 1
    ]
    return answer
]

# currently under development, DO NOT USE IN PRODUCTION!
sub _sine(theta) [
    theta = ((theta + PI) % (2 * PI)) - PI
    result = 0
    termsign = 1
    power = 1

    i = 0
    while i < 100 [
        result = result + ((theta ** power) / factorial(power)) * termsign
        termsign = 0 - termsign
        power = power + 2
    ]
    return result
]